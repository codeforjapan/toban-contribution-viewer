name: Integration Tests CI

on:
  push:
    paths:
      - 'integration-tests/**'
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/integration-tests-ci.yml'
  pull_request:
    paths:
      - 'integration-tests/**'
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/integration-tests-ci.yml'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Docker Compose environment
      working-directory: integration-tests
      run: |
        docker compose -f docker-compose.test.yml build
        docker compose -f docker-compose.test.yml up -d
    
    - name: Wait for services to be ready
      working-directory: integration-tests
      run: |
        # Wait for services to be ready (max 60 seconds)
        timeout=60
        elapsed=0
        interval=5
        
        echo "Waiting for services to be ready..."
        until docker compose -f docker-compose.test.yml exec -T test-runner curl -s http://test-frontend:5173 > /dev/null || [ $elapsed -ge $timeout ]
        do
          sleep $interval
          elapsed=$((elapsed + interval))
          echo "Waited ${elapsed}s for services to be ready..."
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "Timed out waiting for services to be ready"
          docker compose -f docker-compose.test.yml logs
          exit 1
        fi
        
        echo "Services are ready!"
    
    - name: Run E2E tests
      working-directory: integration-tests
      run: |
        docker compose -f docker-compose.test.yml exec -T test-runner npm run test:e2e
    
    - name: Run API tests
      working-directory: integration-tests
      run: |
        docker compose -f docker-compose.test.yml exec -T test-runner npm run test:api
    
    - name: Collect test results
      if: always()
      working-directory: integration-tests
      run: |
        mkdir -p test-results
        docker compose -f docker-compose.test.yml cp test-runner:/app/results ./test-results
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: integration-tests/test-results
    
    - name: Upload test screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-screenshots
        path: integration-tests/test-results/screenshots
    
    - name: Stop Docker Compose environment
      if: always()
      working-directory: integration-tests
      run: docker compose -f docker-compose.test.yml down
